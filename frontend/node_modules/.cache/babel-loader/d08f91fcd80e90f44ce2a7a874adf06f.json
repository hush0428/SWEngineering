{"ast":null,"code":"import Axios from 'axios';\nimport { EVENT_DETAILS_FAIL, EVENT_DETAILS_REQUEST, EVENT_DETAILS_SUCCESS, EVENT_LIST_FAIL, EVENT_LIST_REQUEST, EVENT_LIST_SUCCESS, EVENT_CREATE_REQUEST, EVENT_CREATE_SUCCESS, EVENT_CREATE_FAIL, EVENT_UPDATE_REQUEST, EVENT_UPDATE_SUCCESS, EVENT_UPDATE_FAIL, EVENT_DELETE_REQUEST, EVENT_DELETE_FAIL, EVENT_DELETE_SUCCESS, EVENT_CATEGORY_LIST_SUCCESS, EVENT_CATEGORY_LIST_REQUEST, EVENT_CATEGORY_LIST_FAIL, EVENT_TOPSELLERS_LIST_REQUEST, EVENT_TOPSELLERS_LIST_SUCCESS, EVENT_TOPSELLERS_LIST_FAIL, EVENT_REVIEW_CREATE_REQUEST, EVENT_REVIEW_CREATE_SUCCESS, EVENT_REVIEW_CREATE_FAIL } from \"../constants/eventConstants\";\nexport const listEvents = ({\n  name = '',\n  category = '',\n  order = '',\n  min = 0,\n  max = 0,\n  rating = 0\n}) => async dispatch => {\n  dispatch({\n    type: EVENT_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/events?name=${name}&category=${category}&min=${min}&max=${max}&rating=${rating}&order=${order}`);\n    dispatch({\n      type: EVENT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: EVENT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const listEventCategories = () => async dispatch => {\n  dispatch({\n    type: EVENT_CATEGORY_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/events/categories`);\n    dispatch({\n      type: EVENT_CATEGORY_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: EVENT_CATEGORY_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const detailsEvent = eventId => async dispatch => {\n  dispatch({\n    type: EVENT_DETAILS_REQUEST,\n    payload: eventId\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get(`/api/events/${eventId}`);\n    dispatch({\n      type: EVENT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: EVENT_DETAILS_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const createEvent = () => async (dispatch, getState) => {\n  dispatch({\n    type: EVENT_CREATE_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.post('/api/events', {}, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: EVENT_CREATE_SUCCESS,\n      payload: data.event\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: EVENT_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateEvent = event => async (dispatch, getState) => {\n  dispatch({\n    type: EVENT_UPDATE_REQUEST,\n    payload: event\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.put(`/api/events/${event._id}`, event, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: EVENT_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: EVENT_UPDATE_FAIL,\n      error: message\n    });\n  }\n};\nexport const deleteEvent = eventId => async (dispatch, getState) => {\n  dispatch({\n    type: EVENT_DELETE_REQUEST,\n    payload: eventId\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = Axios.delete(`/api/events/${eventId}`, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: EVENT_DELETE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: EVENT_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listTopEvents = () => async dispatch => {\n  dispatch({\n    type: EVENT_TOPSELLERS_LIST_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.get('/api/events/top-sellers');\n    dispatch({\n      type: EVENT_TOPSELLERS_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: EVENT_TOPSELLERS_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const createReview = (eventId, review) => async (dispatch, getState) => {\n  dispatch({\n    type: EVENT_REVIEW_CREATE_REQUEST\n  });\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n\n  try {\n    const {\n      data\n    } = await Axios.post(`/api/events/${eventId}/reviews`, review, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    });\n    dispatch({\n      type: EVENT_REVIEW_CREATE_SUCCESS,\n      payload: data.review\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: EVENT_REVIEW_CREATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/hebin/Desktop/SWE/SWEngineering/frontend/src/actions/eventActions.js"],"names":["Axios","EVENT_DETAILS_FAIL","EVENT_DETAILS_REQUEST","EVENT_DETAILS_SUCCESS","EVENT_LIST_FAIL","EVENT_LIST_REQUEST","EVENT_LIST_SUCCESS","EVENT_CREATE_REQUEST","EVENT_CREATE_SUCCESS","EVENT_CREATE_FAIL","EVENT_UPDATE_REQUEST","EVENT_UPDATE_SUCCESS","EVENT_UPDATE_FAIL","EVENT_DELETE_REQUEST","EVENT_DELETE_FAIL","EVENT_DELETE_SUCCESS","EVENT_CATEGORY_LIST_SUCCESS","EVENT_CATEGORY_LIST_REQUEST","EVENT_CATEGORY_LIST_FAIL","EVENT_TOPSELLERS_LIST_REQUEST","EVENT_TOPSELLERS_LIST_SUCCESS","EVENT_TOPSELLERS_LIST_FAIL","EVENT_REVIEW_CREATE_REQUEST","EVENT_REVIEW_CREATE_SUCCESS","EVENT_REVIEW_CREATE_FAIL","listEvents","name","category","order","min","max","rating","dispatch","type","data","get","payload","error","message","listEventCategories","detailsEvent","eventId","response","createEvent","getState","userSignin","userInfo","post","headers","Authorization","token","event","updateEvent","put","_id","deleteEvent","delete","listTopEvents","createReview","review"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EACSC,qBADT,EAESC,qBAFT,EAGSC,eAHT,EAISC,kBAJT,EAKSC,kBALT,EAMSC,oBANT,EAOSC,oBAPT,EAQSC,iBART,EASSC,oBATT,EAUSC,oBAVT,EAWSC,iBAXT,EAYSC,oBAZT,EAaSC,iBAbT,EAcSC,oBAdT,EAeSC,2BAfT,EAgBSC,2BAhBT,EAiBSC,wBAjBT,EAkBSC,6BAlBT,EAmBSC,6BAnBT,EAoBSC,0BApBT,EAqBSC,2BArBT,EAsBSC,2BAtBT,EAuBSC,wBAvBT,QAwBe,6BAxBf;AA2BA,OAAO,MAAMC,UAAU,GAAG,CAAC;AACzBC,EAAAA,IAAI,GAAC,EADoB;AAEzBC,EAAAA,QAAQ,GAAG,EAFc;AAGzBC,EAAAA,KAAK,GAAG,EAHiB;AAIzBC,EAAAA,GAAG,GAAG,CAJmB;AAKzBC,EAAAA,GAAG,GAAG,CALmB;AAMzBC,EAAAA,MAAM,GAAG;AANgB,CAAD,KAOpB,MAAOC,QAAP,IAAoB;AACtBA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAE5B;AADD,GAAD,CAAR;;AAGA,MAAI;AACA,UAAM;AAAE6B,MAAAA;AAAF,QAAW,MAAMlC,KAAK,CAACmC,GAAN,CACpB,oBAAmBT,IAAK,aAAYC,QAAS,QAAOE,GAAI,QAAOC,GAAI,WAAUC,MAAO,UAASH,KAAM,EAD/E,CAAvB;AAEAI,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE3B,kBAAP;AAA4B8B,MAAAA,OAAO,EAAGF;AAAtC,KAAD,CAAR;AACH,GAJD,CAIE,OAAOG,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAE7B,eAAP;AAAwBgC,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAvC,KAAD,CAAR;AAEH;AACJ,CAnBM;AAqBP,OAAO,MAAMC,mBAAmB,GAAG,MAAM,MAAOP,QAAP,IAAoB;AAC3DA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEhB;AADC,GAAD,CAAR;;AAGA,MAAI;AACF,UAAM;AAAEiB,MAAAA;AAAF,QAAW,MAAMlC,KAAK,CAACmC,GAAN,CAAW,wBAAX,CAAvB;AACAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEjB,2BAAR;AAAqCoB,MAAAA,OAAO,EAAEF;AAA9C,KAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEf,wBAAR;AAAkCkB,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAjD,KAAD,CAAR;AACD;AACF,CAVM;AAYP,OAAO,MAAME,YAAY,GAAIC,OAAD,IAAa,MAAOT,QAAP,IAAoB;AACzDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE/B,qBAAR;AAA+BkC,IAAAA,OAAO,EAAEK;AAAxC,GAAD,CAAR;;AACA,MAAI;AACF,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMlC,KAAK,CAACmC,GAAN,CAAW,eAAcM,OAAQ,EAAjC,CAAvB;AACAT,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE9B,qBAAR;AAA+BiC,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEhC,kBADC;AAEPmC,MAAAA,OAAO,EACLC,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC;AALL,KAAD,CAAR;AAOD;AACF,CAdI;AAgBL,OAAO,MAAMK,WAAW,GAAG,MAAM,OAAOX,QAAP,EAAiBY,QAAjB,KAA8B;AAC7DZ,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAE1B;AAAR,GAAD,CAAR;AACA,QAAM;AACJsC,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AADR,MAEFF,QAAQ,EAFZ;;AAGA,MAAI;AACF,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMlC,KAAK,CAAC+C,IAAN,CACrB,aADqB,EAErB,EAFqB,EAGrB;AACEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAA1C;AADX,KAHqB,CAAvB;AAOAlB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEzB,oBADC;AAEP4B,MAAAA,OAAO,EAAEF,IAAI,CAACiB;AAFP,KAAD,CAAR;AAID,GAZD,CAYE,OAAOd,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;AAIAN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAExB,iBAAR;AAA2B2B,MAAAA,OAAO,EAAEE;AAApC,KAAD,CAAR;AACD;AACF,CAxBM;AA0BP,OAAO,MAAMc,WAAW,GAAID,KAAD,IAAW,OAAOnB,QAAP,EAAiBY,QAAjB,KAA8B;AAClEZ,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEvB,oBAAR;AAA8B0B,IAAAA,OAAO,EAAEe;AAAvC,GAAD,CAAR;AACA,QAAM;AAACN,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AAAb,MAA8BF,QAAQ,EAA5C;;AACA,MAAI;AACF,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMlC,KAAK,CAACqD,GAAN,CAAW,eAAcF,KAAK,CAACG,GAAI,EAAnC,EAAsCH,KAAtC,EAA6C;AAClEH,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAA1C;AADyD,KAA7C,CAAvB;AAGDlB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEtB,oBAAR;AAA8ByB,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AACA,GALD,CAKE,OAAOG,KAAP,EAAc;AAChB,UAAMC,OAAO,GACTD,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHd;AAIEN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAErB,iBAAR;AAA2ByB,MAAAA,KAAK,EAAEC;AAAlC,KAAD,CAAR;AACD;AACF,CAfM;AAiBP,OAAO,MAAMiB,WAAW,GAAId,OAAD,IAAa,OAAOT,QAAP,EAAiBY,QAAjB,KAA8B;AACpEZ,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEpB,oBAAR;AAA8BuB,IAAAA,OAAO,EAAEK;AAAvC,GAAD,CAAR;AACA,QAAM;AACJI,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AADR,MAEFF,QAAQ,EAFZ;;AAGA,MAAI;AACF,UAAM;AAAEV,MAAAA;AAAF,QAAWlC,KAAK,CAACwD,MAAN,CAAc,eAAcf,OAAQ,EAApC,EAAuC;AACtDO,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAA1C;AAD6C,KAAvC,CAAjB;AAGAlB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAElB,oBAAR;AAA8BqB,MAAAA,OAAO,EAACF;AAAtC,KAAD,CAAR;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;AAIAN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEnB,iBAAR;AAA2BsB,MAAAA,OAAO,EAAEE;AAApC,KAAD,CAAR;AACD;AACF,CAjBM;AAmBP,OAAO,MAAMmB,aAAa,GAAG,MAAM,MAAOzB,QAAP,IAAoB;AACrDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEd;AADD,GAAD,CAAR;;AAGA,MAAI;AACA,UAAM;AAAEe,MAAAA;AAAF,QAAW,MAAMlC,KAAK,CAACmC,GAAN,CACrB,yBADqB,CAAvB;AAEAH,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEb,6BAAP;AAAuCgB,MAAAA,OAAO,EAAGF;AAAjD,KAAD,CAAR;AACH,GAJD,CAIE,OAAOG,KAAP,EAAc;AACZL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEZ,0BAAP;AAAmCe,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAlD,KAAD,CAAR;AACH;AACJ,CAXQ;AAaT,OAAO,MAAMoB,YAAY,GAAG,CAACjB,OAAD,EAAUkB,MAAV,KAAqB,OAAO3B,QAAP,EAAiBY,QAAjB,KAA8B;AAC7EZ,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACA,QAAM;AACJuB,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF;AADR,MAEFF,QAAQ,EAFZ;;AAGA,MAAI;AACF,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMlC,KAAK,CAAC+C,IAAN,CACpB,eAAcN,OAAQ,UADF,EAErBkB,MAFqB,EAGrB;AACEX,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAA1C;AADX,KAHqB,CAAvB;AAOAlB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV,2BADC;AAEPa,MAAAA,OAAO,EAAEF,IAAI,CAACyB;AAFP,KAAD,CAAR;AAID,GAZD,CAYE,OAAOtB,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACK,QAAN,IAAkBL,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OAAtC,GACID,KAAK,CAACK,QAAN,CAAeR,IAAf,CAAoBI,OADxB,GAEID,KAAK,CAACC,OAHZ;AAIAN,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,wBAAR;AAAkCY,MAAAA,OAAO,EAAEE;AAA3C,KAAD,CAAR;AACD;AACF,CAxBM","sourcesContent":["import Axios from 'axios';\r\nimport { EVENT_DETAILS_FAIL,\r\n         EVENT_DETAILS_REQUEST,\r\n         EVENT_DETAILS_SUCCESS, \r\n         EVENT_LIST_FAIL, \r\n         EVENT_LIST_REQUEST, \r\n         EVENT_LIST_SUCCESS,\r\n         EVENT_CREATE_REQUEST,\r\n         EVENT_CREATE_SUCCESS,\r\n         EVENT_CREATE_FAIL,\r\n         EVENT_UPDATE_REQUEST,\r\n         EVENT_UPDATE_SUCCESS,\r\n         EVENT_UPDATE_FAIL,\r\n         EVENT_DELETE_REQUEST,\r\n         EVENT_DELETE_FAIL,\r\n         EVENT_DELETE_SUCCESS,\r\n         EVENT_CATEGORY_LIST_SUCCESS,\r\n         EVENT_CATEGORY_LIST_REQUEST,\r\n         EVENT_CATEGORY_LIST_FAIL,\r\n         EVENT_TOPSELLERS_LIST_REQUEST,\r\n         EVENT_TOPSELLERS_LIST_SUCCESS,\r\n         EVENT_TOPSELLERS_LIST_FAIL,\r\n         EVENT_REVIEW_CREATE_REQUEST,\r\n         EVENT_REVIEW_CREATE_SUCCESS,\r\n         EVENT_REVIEW_CREATE_FAIL,\r\n        } from \"../constants/eventConstants\"\r\n\r\n\r\nexport const listEvents = ({\r\n  name='',\r\n  category = '',\r\n  order = '',\r\n  min = 0,\r\n  max = 0,\r\n  rating = 0,\r\n}) => async (dispatch) => {\r\n    dispatch({\r\n        type: EVENT_LIST_REQUEST\r\n    });\r\n    try {\r\n        const { data } = await Axios.get(\r\n          `/api/events?name=${name}&category=${category}&min=${min}&max=${max}&rating=${rating}&order=${order}`);\r\n        dispatch({type: EVENT_LIST_SUCCESS , payload : data});\r\n    } catch (error) {\r\n        dispatch({type: EVENT_LIST_FAIL, payload: error.message});\r\n        \r\n    }\r\n}\r\n\r\nexport const listEventCategories = () => async (dispatch) => {\r\n  dispatch({\r\n    type: EVENT_CATEGORY_LIST_REQUEST,\r\n  });\r\n  try {\r\n    const { data } = await Axios.get(`/api/events/categories`);\r\n    dispatch({ type: EVENT_CATEGORY_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: EVENT_CATEGORY_LIST_FAIL, payload: error.message });\r\n  }\r\n};\r\n\r\nexport const detailsEvent = (eventId) => async (dispatch) => {\r\n    dispatch({ type: EVENT_DETAILS_REQUEST, payload: eventId });\r\n    try {\r\n      const { data } = await Axios.get(`/api/events/${eventId}`);\r\n      dispatch({ type: EVENT_DETAILS_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({\r\n        type: EVENT_DETAILS_FAIL,\r\n        payload:\r\n          error.response && error.response.data.message\r\n            ? error.response.data.message\r\n            : error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  export const createEvent = () => async (dispatch, getState) => {\r\n    dispatch({ type: EVENT_CREATE_REQUEST });\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState();\r\n    try {\r\n      const { data } = await Axios.post(\r\n        '/api/events',\r\n        {},\r\n        {\r\n          headers: { Authorization: `Bearer ${userInfo.token}` },\r\n        }\r\n      );\r\n      dispatch({\r\n        type: EVENT_CREATE_SUCCESS,\r\n        payload: data.event,\r\n      });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      dispatch({ type: EVENT_CREATE_FAIL, payload: message });\r\n    }\r\n  };\r\n\r\n  export const updateEvent = (event) => async (dispatch, getState) => {\r\n    dispatch({ type: EVENT_UPDATE_REQUEST, payload: event });\r\n    const {userSignin: { userInfo },} = getState();\r\n    try {\r\n      const { data } = await Axios.put(`/api/events/${event._id}`, event, {\r\n        headers: { Authorization: `Bearer ${userInfo.token}` },\r\n      });\r\n     dispatch({ type: EVENT_UPDATE_SUCCESS, payload: data });\r\n    } catch (error) {\r\n    const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      dispatch({ type: EVENT_UPDATE_FAIL, error: message });\r\n    }\r\n  };\r\n\r\n  export const deleteEvent = (eventId) => async (dispatch, getState) => {\r\n    dispatch({ type: EVENT_DELETE_REQUEST, payload: eventId });\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState();\r\n    try {\r\n      const { data } = Axios.delete(`/api/events/${eventId}`, {\r\n        headers: { Authorization: `Bearer ${userInfo.token}` },\r\n      });\r\n      dispatch({ type: EVENT_DELETE_SUCCESS, payload:data });\r\n    } catch (error) {\r\n      const message =\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message;\r\n      dispatch({ type: EVENT_DELETE_FAIL, payload: message });\r\n    }\r\n  };\r\n\r\n  export const listTopEvents = () => async (dispatch) => {\r\n    dispatch({\r\n        type: EVENT_TOPSELLERS_LIST_REQUEST\r\n    });\r\n    try {\r\n        const { data } = await Axios.get(\r\n          '/api/events/top-sellers');\r\n        dispatch({type: EVENT_TOPSELLERS_LIST_SUCCESS , payload : data});\r\n    } catch (error) {\r\n        dispatch({type: EVENT_TOPSELLERS_LIST_FAIL, payload: error.message});\r\n    }\r\n}\r\n\r\nexport const createReview = (eventId, review) => async (dispatch, getState) => {\r\n  dispatch({ type: EVENT_REVIEW_CREATE_REQUEST });\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  try {\r\n    const { data } = await Axios.post(\r\n      `/api/events/${eventId}/reviews`,\r\n      review,\r\n      {\r\n        headers: { Authorization: `Bearer ${userInfo.token}` },\r\n      }\r\n    );\r\n    dispatch({\r\n      type: EVENT_REVIEW_CREATE_SUCCESS,\r\n      payload: data.review,\r\n    });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: EVENT_REVIEW_CREATE_FAIL, payload: message });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}